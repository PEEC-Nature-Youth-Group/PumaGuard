name: Test and package code

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_call:
  merge_group:

env:
  PYTHON_VERSION: "3.10" # Needs to work with Tensorflow

jobs:
  lint-notebooks:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Lint Python Notebooks
        run: make lint-notebooks

  lint-python:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Lint Python Sources (pylint)
        run: make pylint
      - name: Lint Python Sources (mypy)
        run: make mypy
      - name: Lint Bash Sources (bashate)
        run: make bashate

  lint-ansible:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Run ansible-lint
        uses: ansible/ansible-lint@main
        with:
          args: ""
          setup_python: true
          working_directory: scripts
          requirements_file: ""

  test-python:
    runs-on: ubuntu-24.04
    needs: [lint-python]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          sudo apt install --yes --no-install-recommends inotify-tools
      - name: Run tests
        run: |
          make test

  build-python:
    runs-on: ubuntu-24.04
    needs: [test-python, lint-python]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Get Python package version
        id: get_python_package_version
        run: |
          VERSION=$(git describe --tags | sed --regexp-extended 's/^v([0-9]+)(-([0-9]+))?.*/\1.post\3/; s/.post$//')
          echo "python_package_version=${VERSION}" >> "${GITHUB_OUTPUT}"
      - name: Update package version
        run: poetry version "${{ steps.get_python_package_version.outputs.python_package_version }}"
      - name: Build package
        run: make build
      - uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ steps.get_python_package_version.outputs.python_package_version }}
          path: dist/*

  build-snap:
    runs-on: ubuntu-22.04
    needs: [test-python, lint-python]

    steps:
      - name: Check container free disk space
        run: df --human-readable /
      - name: Remove unecessary packages
        run: |
          sudo apt remove --auto-remove --purge \
            azure-cli \
            \*dotnet\* \
            google-chrome-stable \
            google-cloud-cli \
            \*jdk\* \
            microsoft-edge-stable \
            \*mono\* \
            \*mysql\* \
            powershell \
            r-base\*
      - name: Remove unecessary snaps
        run: |
          snap list \
            | awk '{print $1}' \
            | grep -E '(gnome|firefox|gtk)' \
            | xargs --verbose sudo snap remove --purge
      - name: Check container free disk space again
        run: df --human-readable /
      - name: Get largest installed packages
        run: |
          #!/bin/bash
          set -e -u -x
          apt list --installed \
            | grep -v Listing \
            | awk -F / '{print $1}' \
            | xargs apt-cache --no-all-versions show \
            | awk 'BEGIN{ size = 0; package = "" } /^Installed-Size:/{size = $2 } /^Package:/{package = $2} //{ if (size > 0 && package != "") { print size, package; size = 0; package = "" }}' \
            | sort --reverse --numeric-sort \
            | head --lines 30
      - name: Get installed snaps
        run: snap list
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get snap version
        id: get_snap_version
        run: |
          VERSION=$(git describe --tags | sed --regexp-extended 's/^v([0-9]+)(-([0-9]+))?.*/\1.post\3/; s/.post$//')
          #VERSION=$(git describe --tags)
          echo "snap_version=${VERSION}" >> "${GITHUB_OUTPUT}"
      - uses: snapcore/action-build@v1
        id: snap
      - uses: actions/upload-artifact@v4
        with:
          name: snap-${{ steps.get_snap_version.outputs.snap_version }}
          path: ${{ steps.snap.outputs.snap }}

  release:
    runs-on: ubuntu-24.04
    needs: [build-python, build-snap, lint-notebooks, functional-poetry, functional-snap, lint-ansible]
    permissions: write-all

    steps:
      - uses: actions/download-artifact@v4
      - run: |
          #!/bin/bash
          set -e -u -x
          RELEASE_ID=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{ "tag_name": "${{ github.ref_name }}", "name": "Release ${{ github.ref_name }}", "generate_release_notes": true }' \
            | jq --raw-output '.id')
          for artifact in snap-*/*.snap python-package-*/*.whl; do
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Content-Type: application/octet-stream" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets?name=${artifact}" \
              --data-binary "@${artifact}"
          done
        if: ${{ github.ref_type == 'tag' }}

  functional-poetry:
    runs-on: ubuntu-24.04
    needs: [build-python]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - run: make functional-poetry

  functional-snap:
    runs-on: ubuntu-24.04
    needs: [build-snap]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Install snap
        run: sudo snap install --dangerous ./snap-*/pumaguard*snap
      - run: make functional-snap
